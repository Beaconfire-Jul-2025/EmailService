name: Spring Boot CI/CD

on:
  pull_request:
    branches: [ main ]

permissions:
  pull-requests: write
  contents: write

jobs:
  format:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 8 (for google-java-format compatibility)
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '8'

      - name: Format Code with Google Java Format Action
        uses: axel-op/googlejavaformat-action@v4
        with:
          args: "--replace"
          github-token: ${{ secrets.GITHUB_TOKEN }}


  build-and-test:
    runs-on: ubuntu-latest
    needs: format
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '8'
          cache: 'maven'

      - name: Build and Test with Maven
        run: mvn -B package --file pom.xml

      - name: Upload Report
        uses: 'actions/upload-artifact@v4'
        with:
          name: jacoco-report
          path: |
            ${{ github.workspace }}/target/site/jacoco/jacoco.xml
            ${{ github.workspace }}/target/site/jacoco/index.html

      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.7.2
        with:
          paths: ${{ github.workspace }}/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 50
          min-coverage-changed-files: 50
          update-comment: true
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  health-check:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '8'

      - name: Start RabbitMQ with definitions.json
        run: |
          docker run -d \
            --name rabbitmq \
            -p 5672:5672 -p 15672:15672 \
            -e RABBITMQ_LOAD_DEFINITIONS=/etc/rabbitmq/definitions.json \
            -e RABBITMQ_DEFAULT_USER=guest \
            -e RABBITMQ_DEFAULT_PASS=guest \
            rabbitmq:3-management

          echo "Waiting for RabbitMQ container to become healthy..."
          sleep 10

          echo "Copying definitions.json into container..."
          docker cp .rmq/definitions.json rabbitmq:/etc/rabbitmq/definitions.json

          echo "Restarting container to apply definitions..."
          docker restart rabbitmq

          echo "Waiting for RabbitMQ to be ready..."
          for i in {1..10}; do
            sleep 5
            if docker exec rabbitmq rabbitmq-diagnostics -q ping; then
              echo "✅ RabbitMQ is healthy"
              break
            else
              echo "Waiting on RabbitMQ ($i)..."
            fi
          done

      - name: Download Built JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      - name: Run Spring Boot App with test profile and check health
        env:
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
        run: |
          echo "Launching Spring Boot app (test profile)..."
          timeout 75s bash -c '
            java -jar target/*.jar --spring.profiles.active=test &
            APP_PID=$!

            echo "Waiting for actuator to respond..."

            for i in {1..15}; do
              sleep 5
              if curl -s http://localhost:8085/actuator/health | grep "\"status\":\"UP\"" > /dev/null; then
                echo "✅ Actuator is UP"
                kill $APP_PID
                exit 0
              else
                echo "Still waiting ($i)..."
              fi
            done

            echo "❌ Actuator health check failed"
            kill $APP_PID
            exit 1
          '
  

